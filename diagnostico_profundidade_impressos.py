#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Diagn√≥stico Espec√≠fico de Profundidade de Impressos
Analisa problemas estruturais detectados nos logs do main.py
"""

import json
from typing import Dict, Any, List
import logging

def calcular_profundidade(obj, nivel=0, max_depth=10):
    """Calcula profundidade de estrutura aninhada"""
    if nivel > max_depth:
        return max_depth
    
    if isinstance(obj, dict):
        if not obj:
            return nivel
        return max(calcular_profundidade(v, nivel + 1, max_depth) for v in obj.values())
    elif isinstance(obj, list):
        if not obj:
            return nivel
        return max(calcular_profundidade(item, nivel + 1, max_depth) for item in obj)
    else:
        return nivel

def diagnosticar_estrutura_impressos():
    """Simula o problema detectado nos logs"""
    print("üîç DIAGN√ìSTICO DE PROFUNDIDADE DE IMPRESSOS")
    print("=" * 60)
    
    # Estrutura problem√°tica similar ao log
    impresso_problematico = {
        "idImpresso": "est01_examefisico",
        "tituloImpresso": "SINAIS VITAIS E EXAME F√çSICO",
        "tipoConteudo": "lista_chave_valor_secoes",
        "conteudo": {
            "secoes": [
                {
                    "tituloSecao": "SINAIS VITAIS",
                    "itens": [
                        {"chave": "Press√£o arterial", "valor": "95 x 60 mmHg"},
                        {"chave": "Frequ√™ncia card√≠aca", "valor": "115 bpm"},
                        {"chave": "Frequ√™ncia respirat√≥ria", "valor": "24 irpm"}
                    ]
                },
                {
                    "tituloSecao": "EXAME F√çSICO GERAL",
                    "itens": [
                        {"chave": "Estado geral", "valor": "Regular estado geral, p√°lido (+/4+)"}
                    ]
                }
            ]
        }
    }
    
    # Calcular profundidade
    prof_total = calcular_profundidade(impresso_problematico)
    prof_conteudo = calcular_profundidade(impresso_problematico["conteudo"])
    prof_secoes = calcular_profundidade(impresso_problematico["conteudo"]["secoes"])
    
    print(f"üìä AN√ÅLISE DE PROFUNDIDADE:")
    print(f"   ‚Ä¢ Profundidade total do impresso: {prof_total}")
    print(f"   ‚Ä¢ Profundidade do conte√∫do: {prof_conteudo}")
    print(f"   ‚Ä¢ Profundidade das se√ß√µes: {prof_secoes}")
    print()
    
    print(f"üö® PROBLEMA DETECTADO:")
    print(f"   ‚Ä¢ Limite permitido: 2 n√≠veis")
    print(f"   ‚Ä¢ Profundidade atual: {prof_conteudo} n√≠veis")
    print(f"   ‚Ä¢ Viola√ß√£o: {prof_conteudo - 2} n√≠veis a mais")
    print()
    
    # Estrutura depois da sanitiza√ß√£o (strings JSON)
    print("üìã ESTRUTURA AP√ìS SANITIZA√á√ÉO PROBLEM√ÅTICA:")
    impresso_sanitizado_errado = {
        "idImpresso": "est01_examefisico",
        "tituloImpresso": "SINAIS VITAIS E EXAME F√çSICO", 
        "tipoConteudo": "lista_chave_valor_secoes",
        "conteudo": {
            "secoes": [
                '{"tituloSecao": "SINAIS VITAIS", "itens": [{"chave": "Press√£o arterial", "valor": "95 x 60 mmHg"}]}',
                '{"tituloSecao": "EXAME F√çSICO GERAL", "itens": [{"chave": "Estado geral", "valor": "Regular estado geral"}]}'
            ]
        }
    }
    
    prof_sanitizado = calcular_profundidade(impresso_sanitizado_errado["conteudo"])
    print(f"   ‚Ä¢ Profundidade ap√≥s sanitiza√ß√£o: {prof_sanitizado}")
    print(f"   ‚Ä¢ Estrutura: conteudo > secoes > [strings JSON]")
    print()
    
    print("‚ùå PROBLEMA COM STRINGS JSON:")
    print("   ‚Ä¢ Se√ß√µes se tornaram strings ao inv√©s de objetos")
    print("   ‚Ä¢ Validator tenta fazer .copy() em string")
    print("   ‚Ä¢ Erro: 'str' object has no attribute 'copy'")
    print()
    
    return impresso_problematico, impresso_sanitizado_errado

def criar_estrutura_correta():
    """Cria estrutura correta com profundidade <= 2"""
    print("‚úÖ ESTRUTURA CORRIGIDA:")
    print("=" * 60)
    
    # Vers√£o corrigida - profundidade m√°xima 2
    impresso_corrigido = {
        "idImpresso": "est01_examefisico",
        "tituloImpresso": "SINAIS VITAIS E EXAME F√çSICO",
        "tipoConteudo": "lista_chave_valor_secoes",
        "conteudo": {
            "sinais_vitais": "PA: 95x60 mmHg | FC: 115 bpm | FR: 24 irpm | T: 37,9¬∞C | SatO2: 93%",
            "exame_geral": "Regular estado geral, p√°lido (+/4+), sudor√©tico, dispneico",
            "cardiovascular": "Turg√™ncia jugular patol√≥gica. B3 em foco mitral",
            "respiratorio": "Estertores crepitantes em bases pulmonares",
            "extremidades": "Edema mole, sim√©trico (++/4+) at√© tornozelos"
        }
    }
    
    prof_corrigido = calcular_profundidade(impresso_corrigido["conteudo"])
    print(f"üìä PROFUNDIDADE CORRIGIDA: {prof_corrigido} n√≠veis")
    print(f"‚úÖ Dentro do limite: {prof_corrigido} <= 2")
    print()
    
    print("üîß ALTERA√á√ïES APLICADAS:")
    print("   ‚Ä¢ Removida estrutura secoes > itens > chave/valor")
    print("   ‚Ä¢ Convertido para chaves diretas com strings descritivas")
    print("   ‚Ä¢ Mantido conte√∫do m√©dico completo")
    print("   ‚Ä¢ Profundidade reduzida de 5 para 2 n√≠veis")
    
    return impresso_corrigido

def simular_erro_validacao():
    """Simula o erro de valida√ß√£o encontrado nos logs"""
    print("\nüö® SIMULA√á√ÉO DO ERRO DE VALIDA√á√ÉO:")
    print("=" * 60)
    
    # String JSON que causa o erro
    secao_string = '{"tituloSecao": "SINAIS VITAIS", "itens": [{"chave": "PA", "valor": "95x60"}]}'
    
    print(f"‚ùå Tentativa de .copy() em string:")
    print(f"   Tipo: {type(secao_string)}")
    print(f"   Valor: {secao_string[:50]}...")
    print()
    
    try:
        # Corrigir: converter string JSON para dict antes de copiar
        secao_dict = json.loads(secao_string)
        copia = secao_dict.copy()
        print(f"‚úÖ Sucesso: Copiado como dict - {copia}")
    except AttributeError as e:
        print(f"üî¥ ERRO CAPTURADO: {e}")
        print("   ‚Ä¢ Strings n√£o t√™m m√©todo .copy()")
        print("   ‚Ä¢ Validator espera objetos dict")
        print("   ‚Ä¢ Sanitiza√ß√£o converteu objetos em strings")
    
    print()
    print("‚úÖ SOLU√á√ÉO:")
    print("   ‚Ä¢ Detectar strings JSON no conte√∫do")
    print("   ‚Ä¢ Converter de volta para objetos dict")
    print("   ‚Ä¢ Ou reestruturar com profundidade <= 2")

if __name__ == "__main__":
    print("üè• DIAGN√ìSTICO DE PROBLEMAS ESTRUTURAIS NOS IMPRESSOS")
    print("Baseado nos logs do main.py")
    print("=" * 70)
    print()
    
    # Diagn√≥stico do problema
    problematico, sanitizado_errado = diagnosticar_estrutura_impressos()
    
    # Estrutura corrigida
    corrigido = criar_estrutura_correta()
    
    # Simula√ß√£o do erro
    simular_erro_validacao()
    
    print("\n" + "=" * 70)
    print("üìã RESUMO DO DIAGN√ìSTICO:")
    print("1. ‚ùå Impressos gerados com profundidade > 2 n√≠veis")
    print("2. ‚ùå Sanitiza√ß√£o converte objetos em strings JSON")  
    print("3. ‚ùå Validator falha ao tentar .copy() em strings")
    print("4. ‚úÖ Solu√ß√£o: Reestruturar com profundidade <= 2")
    print("5. ‚úÖ Alternativa: Corrigir sanitiza√ß√£o/valida√ß√£o")
