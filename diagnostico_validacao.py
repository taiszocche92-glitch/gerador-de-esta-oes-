#!/usr/bin/env python3
"""
Diagn√≥stico dos Problemas de Valida√ß√£o de Impressos
Data: 27 de agosto de 2025
Autor: GitHub Copilot
"""

import json
import logging
import os
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def diagnostico_validacao_impressos():
    """
    Diagn√≥stico completo dos problemas de valida√ß√£o de impressos
    baseado nos logs do sistema
    """
    print("=" * 80)
    print("üîç DIAGN√ìSTICO DOS PROBLEMAS DE VALIDA√á√ÉO DE IMPRESSOS")
    print("=" * 80)
    
    # Problemas identificados nos logs
    problemas = [
        {
            "id": "P001",
            "titulo": "Profundidade Excessiva em Impressos",
            "descricao": "Estruturas JSON com mais de 2 n√≠veis de aninhamento",
            "evidencia": "impressos[0].conteudo VIOLATION: profundidade 5 > 2",
            "impacto": "ALTO",
            "solucao": "Corre√ß√£o autom√°tica com convers√£o de estruturas"
        },
        {
            "id": "P002", 
            "titulo": "Tipo de Conte√∫do Incorreto",
            "descricao": "tipoConteudo 'tabela' ao inv√©s de 'lista_chave_valor_secoes'",
            "evidencia": "impressos[2] com tipoConteudo: 'tabela'",
            "impacto": "M√âDIO",
            "solucao": "Detec√ß√£o autom√°tica e corre√ß√£o de tipos"
        },
        {
            "id": "P003",
            "titulo": "String JSON em Arrays",
            "descricao": "JSON serializado como string dentro de arrays",
            "evidencia": "conteudo com strings JSON ao inv√©s de objetos",
            "impacto": "ALTO", 
            "solucao": "Parser autom√°tico de strings JSON"
        },
        {
            "id": "P004",
            "titulo": "Perguntas Ator Simulado Complexas",
            "descricao": "perguntasAtorSimulado com objetos ao inv√©s de strings simples",
            "evidencia": "perguntasAtorSimulado VIOLATION: profundidade 2 > 1",
            "impacto": "M√âDIO",
            "solucao": "Simplifica√ß√£o autom√°tica para lista de strings"
        },
        {
            "id": "P005",
            "titulo": "Tipo imagemComLaudo Incorreto",
            "descricao": "Tipo imagemComLaudo deve ser imagem_com_texto",
            "evidencia": "tipoConteudo: 'imagemComLaudo' em impressos TC e ECG",
            "impacto": "M√âDIO",
            "solucao": "Corre√ß√£o autom√°tica de tipos"
        }
    ]
    
    # Imprimir diagn√≥stico
    for i, problema in enumerate(problemas, 1):
        print(f"\n{i}. {problema['titulo']} ({problema['id']})")
        print(f"   üìÑ Descri√ß√£o: {problema['descricao']}")
        print(f"   üîç Evid√™ncia: {problema['evidencia']}")
        print(f"   ‚ö†Ô∏è  Impacto: {problema['impacto']}")
        print(f"   üîß Solu√ß√£o: {problema['solucao']}")
    
    print("\n" + "=" * 80)
    print("üìä RESUMO DO DIAGN√ìSTICO")
    print("=" * 80)
    print(f"‚Ä¢ Total de problemas identificados: {len(problemas)}")
    print(f"‚Ä¢ Problemas de impacto ALTO: {len([p for p in problemas if p['impacto'] == 'ALTO'])}")
    print(f"‚Ä¢ Problemas de impacto M√âDIO: {len([p for p in problemas if p['impacto'] == 'M√âDIO'])}")
    
    return problemas

def verificar_sistema_validacao():
    """
    Verifica se o sistema de valida√ß√£o est√° funcionando
    """
    print("\n" + "=" * 80)
    print("üîß VERIFICANDO SISTEMA DE VALIDA√á√ÉO")
    print("=" * 80)
    
    arquivos_necessarios = {
        "impressos_validator.py": "Sistema de valida√ß√£o de impressos",
        "corrigir_impressos.py": "Script de corre√ß√£o autom√°tica", 
        "testar_impressos_corrigidos.py": "Script de teste de valida√ß√£o",
        "gabaritoestacoes.json": "Template de gabarito INEP",
        "impressos_corrigidos.json": "Arquivo de impressos corrigidos (ser√° criado)"
    }
    
    status_arquivos = {}
    
    for arquivo, descricao in arquivos_necessarios.items():
        existe = os.path.exists(arquivo)
        status_arquivos[arquivo] = existe
        status = "‚úÖ" if existe else "‚ùå"
        print(f"{status} {arquivo} - {descricao}")
        
        if arquivo == "impressos_corrigidos.json" and not existe:
            print(f"   ‚ÑπÔ∏è  Arquivo ser√° criado durante a corre√ß√£o")
    
    # Verificar importa√ß√£o do validador
    try:
        from impressos_validator import validar_impressos_estacao
        print("‚úÖ M√≥dulo impressos_validator importado com sucesso")
        status_arquivos["validador_import"] = True
    except ImportError as e:
        print(f"‚ùå Erro ao importar validador: {e}")
        status_arquivos["validador_import"] = False
        
    return status_arquivos

def verificar_estrutura_projeto():
    """
    Verifica a estrutura do projeto
    """
    print("\n" + "=" * 80)
    print("üìÅ VERIFICANDO ESTRUTURA DO PROJETO")
    print("=" * 80)
    
    diretorios_importantes = [
        "memoria",
        "__pycache__",
        "api_docs",
        "estacoes_geradas"
    ]
    
    for diretorio in diretorios_importantes:
        existe = os.path.exists(diretorio)
        status = "‚úÖ" if existe else "‚ùå"
        print(f"{status} {diretorio}/")
        
        if diretorio == "memoria" and existe:
            # Verificar arquivos da mem√≥ria
            arquivos_memoria = [
                "aprendizados_usuario.jsonl",
                "config_memoria.json", 
                "referencias_base.md",
                "serviceAccountKey.json"
            ]
            
            for arquivo in arquivos_memoria:
                caminho = os.path.join("memoria", arquivo)
                existe_arquivo = os.path.exists(caminho)
                status_arquivo = "  ‚úÖ" if existe_arquivo else "  ‚ùå"
                print(f"{status_arquivo} {caminho}")

def plano_correcao():
    """
    Plano de corre√ß√£o dos problemas identificados
    """
    print("\n" + "=" * 80)
    print("üîß PLANO DE CORRE√á√ÉO")
    print("=" * 80)
    
    etapas = [
        {
            "etapa": 1,
            "titulo": "Verificar Sistema de Valida√ß√£o",
            "descricao": "Confirmar se impressos_validator.py est√° funcionando",
            "comando": "python -c \"from impressos_validator import validar_impressos_estacao; print('‚úÖ Validador funcionando')\"",
            "tempo_estimado": "2 min"
        },
        {
            "etapa": 2,
            "titulo": "Executar Script de Corre√ß√£o",
            "descricao": "Rodar corrigir_impressos.py para corrigir estruturas",
            "comando": "python corrigir_impressos.py",
            "tempo_estimado": "5 min"
        },
        {
            "etapa": 3,
            "titulo": "Testar Valida√ß√£o Corrigida",
            "descricao": "Validar impressos corrigidos",
            "comando": "python testar_impressos_corrigidos.py",
            "tempo_estimado": "3 min"
        },
        {
            "etapa": 4,
            "titulo": "Atualizar Valida√ß√£o no Main.py",
            "descricao": "Integrar valida√ß√£o antes do salvamento no Firestore",
            "comando": "Modifica√ß√£o no endpoint generate-final-station",
            "tempo_estimado": "10 min"
        },
        {
            "etapa": 5,
            "titulo": "Teste de Integra√ß√£o",
            "descricao": "Testar gera√ß√£o completa de esta√ß√£o via AdminView.vue",
            "comando": "Teste manual via interface",
            "tempo_estimado": "5 min"
        }
    ]
    
    for etapa in etapas:
        print(f"\n{etapa['etapa']}. {etapa['titulo']}")
        print(f"   üìÑ {etapa['descricao']}")
        print(f"   üíª Comando: {etapa['comando']}")
        print(f"   ‚è±Ô∏è  Tempo estimado: {etapa['tempo_estimado']}")
    
    print(f"\n‚è±Ô∏è Tempo total estimado: 25 minutos")
    
    return etapas

def main():
    """
    Fun√ß√£o principal do diagn√≥stico
    """
    print("üöÄ Iniciando diagn√≥stico do sistema de valida√ß√£o de impressos...")
    print(f"üìÖ Data: 27 de agosto de 2025")
    print(f"üìÇ Diret√≥rio: {os.getcwd()}")
    
    # Executar diagn√≥stico
    problemas = diagnostico_validacao_impressos()
    
    # Verificar sistema de valida√ß√£o
    status_arquivos = verificar_sistema_validacao()
    
    # Verificar estrutura do projeto
    verificar_estrutura_projeto()
    
    # Mostrar plano de corre√ß√£o
    etapas = plano_correcao()
    
    print("\n" + "=" * 80)
    print("üöÄ PR√ìXIMOS PASSOS RECOMENDADOS")
    print("=" * 80)
    print("1. ‚úÖ Execute este diagn√≥stico: python diagnostico_validacao.py")
    print("2. üîß Siga o plano de corre√ß√£o em ordem")
    print("3. üìä Monitore logs durante a execu√ß√£o")
    print("4. üß™ Teste a gera√ß√£o de esta√ß√µes ap√≥s corre√ß√µes")
    print("=" * 80)
    
    # Verificar se pode prosseguir
    if not status_arquivos.get("validador_import", False):
        print("\n‚ö†Ô∏è  ATEN√á√ÉO: Sistema de valida√ß√£o com problemas!")
        print("   Primeiro corrija os problemas de importa√ß√£o antes de prosseguir.")
        return False
    
    if not status_arquivos.get("impressos_validator.py", False):
        print("\n‚ö†Ô∏è  ATEN√á√ÉO: Arquivo impressos_validator.py n√£o encontrado!")
        print("   Este arquivo √© essencial para o sistema funcionar.")
        return False
        
    print("\n‚úÖ Sistema pronto para corre√ß√£o!")
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ Diagn√≥stico conclu√≠do com sucesso!")
    else:
        print("\n‚ùå Diagn√≥stico identificou problemas cr√≠ticos!")
